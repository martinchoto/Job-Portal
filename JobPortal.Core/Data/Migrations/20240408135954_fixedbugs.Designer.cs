// <auto-generated />
using System;
using JobPortal.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job_Portal.Data.Migrations
{
    [DbContext(typeof(JobPortalDbContext))]
    [Migration("20240408135954_fixedbugs")]
    partial class fixedbugs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JobPortal.Core.Data.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11d42cfa-0eb5-4556-bbee-452d66efacf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aac6842-aac7-4ae6-9ed9-6817e3dc9378",
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 373, DateTimeKind.Local).AddTicks(4401),
                            Email = "martoadmin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            LastName = "Stalev",
                            LockoutEnabled = false,
                            NormalizedEmail = "martoadmin@abv.bg",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEOdB9Bg8vYS+vwD6nE4itfJMgfccVgPT6gI8AxQLTTtGhuIVEvRsHhHaGhbmqBV6cA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e2b955e-a43b-42c3-87d1-ad61146c6943",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ba20f920-1a04-4d5b-8a7f-f0b0a328169d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "400d2743-2e32-4749-9c7a-1208fdccd4e6",
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 374, DateTimeKind.Local).AddTicks(7667),
                            Email = "lidlbg@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDLBG@ABV.BG",
                            NormalizedUserName = "LIDLBG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOihl7yFhtI2zhEvFYAqTH8dBk9epC3ydubxwlEVzU8RceMmsf1JycKu+Y3Z8zYPIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7350806-b06e-4ac8-9d70-a5519a4d2517",
                            TwoFactorEnabled = false,
                            UserName = "lidlbg"
                        },
                        new
                        {
                            Id = "ca27630c-7fa9-4d54-b8f1-851252abc519",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1242bf20-8885-4550-b8e9-2dca4a6a0e3c",
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 376, DateTimeKind.Local).AddTicks(581),
                            Email = "boschbg@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOSCHBG@ABV.BG",
                            NormalizedUserName = "BOSCHBG",
                            PasswordHash = "AQAAAAEAACcQAAAAEPBfymmbMmjGugoD4mx5kEMAcI0ilFJrsSlJj1aikZr9QXLFW5xvawjBqOB/uo8EeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3758163f-4a63-4152-8f51-b169bd7d1626",
                            TwoFactorEnabled = false,
                            UserName = "boschbg"
                        },
                        new
                        {
                            Id = "018bff8a-5df3-40d8-8a65-e6a5e932f957",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "804cb93c-7282-4159-a9a4-45174e670bbe",
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 377, DateTimeKind.Local).AddTicks(3180),
                            Email = "martoplays@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Martinkata",
                            LastName = "Voivodov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTOPLAYS@ABV.BG",
                            NormalizedUserName = "MARTINCHOTO",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/HwwiCJP6Xk9EIMBBwUA75Dwhw9+g1zSCoUbbH2hCxovx8AR/DRYs4P6lsHCQhVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3dfebfbb-8ab7-4d70-b81f-01a5cdaf5017",
                            TwoFactorEnabled = false,
                            UserName = "martinchoto"
                        });
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ul. Aleksander Stamboliiski",
                            CompanyName = "Billa",
                            Location = "Pazardjik",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Billa-Logo.svg/2560px-Billa-Logo.svg.png",
                            UserId = "b5b0f315-98eb-4078-bf80-a329869ad392"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ul. Iordan Iosifov",
                            CompanyName = "Lidl",
                            Location = "Sofia",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Lidl-Logo.svg/150px-Lidl-Logo.svg.png",
                            UserId = "ba20f920-1a04-4d5b-8a7f-f0b0a328169d"
                        },
                        new
                        {
                            Id = 3,
                            Address = "bul. Tsarigradsko Shose",
                            CompanyName = "Bosch",
                            Location = "Sofia",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Bosch-logo.svg/1920px-Bosch-logo.svg.png",
                            UserId = "ca27630c-7fa9-4d54-b8f1-851252abc519"
                        });
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Date = new DateTime(2024, 6, 7, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5821),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://espnpressroom.com/us/files/2023/06/Hot-Dog-Eating-Contest.png",
                            Name = "Eating Contest"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Date = new DateTime(2024, 5, 18, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5825),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://img.olympics.com/images/image/private/t_s_pog_staticContent_hero_sm/f_auto/primary/qpudtgofz5sw2ffcpz4j",
                            Name = "Shooting"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            Date = new DateTime(2024, 4, 28, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5826),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://t4.ftcdn.net/jpg/02/50/25/97/360_F_250259727_nY20L3aqydok59WVUbouUjw4wnAgJOix.jpg",
                            Name = "Day of the open doors"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            Date = new DateTime(2024, 4, 28, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5828),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://post.healthline.com/wp-content/uploads/2021/09/reading-book-1296x728-header.jpg",
                            Name = "Reading"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 3,
                            Date = new DateTime(2024, 4, 12, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5830),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://t4.ftcdn.net/jpg/02/50/25/97/360_F_250259727_nY20L3aqydok59WVUbouUjw4wnAgJOix.jpg",
                            Name = "Day of the open doors"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 3,
                            Date = new DateTime(2024, 5, 23, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5832),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            ImageUrl = "https://www.classcentral.com/report/wp-content/uploads/2022/03/Frame-3.png",
                            Name = "Programming course"
                        });
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.EventParticipants", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventsParticipants");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5851),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.",
                            Email = "martoplays@abv.bg",
                            FullName = "Martin Stalev",
                            Name = "Application for Cashier",
                            Reason = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus auctor.",
                            UserId = "018bff8a-5df3-40d8-8a65-e6a5e932f957"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 8, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5854),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.",
                            Email = "martoplays@abv.bg",
                            FullName = "Martin Stalev",
                            Name = "Application for Web Dev",
                            Reason = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus auctor.",
                            UserId = "018bff8a-5df3-40d8-8a65-e6a5e932f957"
                        });
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bonus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("VacationDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TypeId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Warehouse worker",
                            PostedDate = new DateTime(2023, 5, 11, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5876),
                            Salary = 1000m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 1,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 2,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Cashier",
                            PostedDate = new DateTime(2023, 5, 11, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5880),
                            Salary = 1200m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 6,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 3,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Cleaner",
                            PostedDate = new DateTime(2023, 5, 11, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5909),
                            Salary = 1400m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 6,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 4,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Cashier",
                            PostedDate = new DateTime(2024, 3, 6, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5911),
                            Salary = 1400m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 6,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 5,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Cleaner for tiles",
                            PostedDate = new DateTime(2024, 3, 6, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5914),
                            Salary = 1400m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 6,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 6,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Cleaner for toilets",
                            PostedDate = new DateTime(2024, 3, 6, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5916),
                            Salary = 1400m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 6,
                            VacationDays = 22
                        },
                        new
                        {
                            Id = 7,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Web Designer",
                            PostedDate = new DateTime(2024, 4, 5, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5918),
                            Salary = 2200m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 1,
                            VacationDays = 32
                        },
                        new
                        {
                            Id = 8,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Web Eng",
                            PostedDate = new DateTime(2024, 4, 5, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5920),
                            Salary = 1400m,
                            Status = "fulltime 8hrs/day",
                            TypeId = 1,
                            VacationDays = 32
                        },
                        new
                        {
                            Id = 9,
                            Bonus = "Whole a lot of benefits working for a big company",
                            CompanyId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ullamcorper neque vel ligula dictum, vitae convallis justo gravida. Nulla facilisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris consequat nisi et neque dapibus, sed vestibulum sapien fermentum. Fusce id justo euismod, posuere eros ac, suscipit felis. Sed consectetur enim id purus finibus.\r\n\r\n\r\n\r\n\r\n",
                            Position = "Web Dev",
                            PostedDate = new DateTime(2024, 4, 5, 16, 59, 54, 378, DateTimeKind.Local).AddTicks(5922),
                            Salary = 1400m,
                            Status = "fulltime 4hrs/day intern",
                            TypeId = 1,
                            VacationDays = 30
                        });
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobOfferApplication", b =>
                {
                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.HasKey("JobOfferId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("JobOffersApplications");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Healthcare"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Creative"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Customer Service"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Company", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Event", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Models.Company", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.EventParticipants", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobApplication", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobOffer", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Core.Data.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobOfferApplication", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Models.JobApplication", "Application")
                        .WithMany("JobOfferApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Core.Data.Models.JobOffer", "JobOffer")
                        .WithMany("JobOfferApplications")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobPortal.Core.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortal.Core.Data.Identity.AppUser", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Company", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobApplication", b =>
                {
                    b.Navigation("JobOfferApplications");
                });

            modelBuilder.Entity("JobPortal.Core.Data.Models.JobOffer", b =>
                {
                    b.Navigation("JobOfferApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
